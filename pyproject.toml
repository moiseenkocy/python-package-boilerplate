[tool.poetry]
name = "sample-package"
version = "0.1.0"
description = ""
authors = ["John Doe <john.doe@example.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
pytest = "^8.1.1"
pytest-cov = "^4.1.0"
ruff = "^0.3.3"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black
line-length = 88
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
select = [
    "F",        # Pyflakes                      https://pypi.org/project/pyflakes/
    "E",        # pycodestyle (Error)           https://pypi.org/project/pycodestyle/
    "W",        # pycodestyle (Warning)         https://pypi.org/project/pycodestyle/
    "C90",      # mccabe                        https://pypi.org/project/mccabe/
    "I",        # isort                         https://pypi.org/project/isort/
    "N",        # pip8-naming                   https://pypi.org/project/pep8-naming/
    "D",        # pydocstyle                    https://pypi.org/project/pydocstyle/
    "UP",       # pyupgrade                     https://pypi.org/project/pyupgrade/
    "YTT",      # flake8-2020                   https://pypi.org/project/flake8-2020/
    "ANN",      # flake8-annotations            https://pypi.org/project/flake8-annotations/
    "ASYNC",    # flake8-async                  https://pypi.org/project/flake8-async/
    "TRIO",     # flake8-TRIO                   https://pypi.org/project/flake8-trio/
    "S",        # flake8-bandit                 https://pypi.org/project/flake8-bandit/
    "BLE",      # flake8-blind-except           https://pypi.org/project/flake8-blind-except/
    "FBT",      # flake8-boolean-trap           https://pypi.org/project/flake8-boolean-trap/
    "B",        # flake8-bugbear                https://pypi.org/project/flake8-bugbear/
    "A",        # flake8-builtins               https://pypi.org/project/flake8-builtins/
    "COM",      # flake8-commas                 https://pypi.org/project/flake8-commas/
#   "CPY",      # flake8-copyright              https://pypi.org/project/flake8-copyright/
    "C4",       # flake8-comprehensions         https://pypi.org/project/flake8-comprehensions/
    "DTZ",      # flake8-datetimez              https://pypi.org/project/flake8-datetimez/
    "T10",      # flake8-debugger               https://pypi.org/project/flake8-debugger/
    "DJ",       # flake8-django                 https://pypi.org/project/flake8-django/
    "EM",       # flake8-errmsg                 https://pypi.org/project/flake8-errmsg/
    "EXE",      # flake8-executable             https://pypi.org/project/flake8-executable/
    "FA",       # flake8-future-annotations     https://pypi.org/project/flake8-future-annotations/
    "ISC",      # flake8-implicit-str-concat    https://pypi.org/project/flake8-implicit-str-concat/
    "ICN",      # flake8-import-conventions     https://github.com/joaopalmeiro/flake8-import-conventions
    "G",        # flake8-logging-format         https://pypi.org/project/flake8-logging-format/
    "INP",      # flake8-no-pep420              https://pypi.org/project/flake8-no-pep420/
    "PIE",      # flake8-pie                    https://pypi.org/project/flake8-pie/
    "T20",      # flake8-print                  https://pypi.org/project/flake8-print/
    "PYI",      # flake8-pyi                    https://pypi.org/project/flake8-pyi/
    "PT",       # flake8-pytest-style           https://pypi.org/project/flake8-pytest-style/
    "Q",        # flake8-quotes                 https://pypi.org/project/flake8-quotes/
    "RSE",      # flake8-raise                  https://pypi.org/project/flake8-raise/
    "RET",      # flake8-return                 https://pypi.org/project/flake8-return/
    "SLF",      # flake8-self                   https://pypi.org/project/flake8-self/
    "SLOT",     # flake8-slots                  https://pypi.org/project/flake8-slots/
    "SIM",      # flake8-simplify               https://pypi.org/project/flake8-simplify/
    "TID",      # flake8-tidy-imports           https://pypi.org/project/flake8-tidy-imports/
    "TCH",      # flake8-type-checking          https://pypi.org/project/flake8-type-checking/
    "INT",      # flake8-gettext                https://pypi.org/project/flake8-gettext/
    "ARG",      # flake8-unused-arguments       https://pypi.org/project/flake8-unused-arguments/
    "PTH",      # flake8-use-pathlib            https://pypi.org/project/flake8-use-pathlib/
    "TD",       # flake8-todos                  https://github.com/orsinium-labs/flake8-todos/
    "FIX",      # flake8-fixme                  https://github.com/tommilligan/flake8-fixme
    "ERA",      # eradicate                     https://pypi.org/project/eradicate/
    "PD",       # pandas-vet                    https://pypi.org/project/pandas-vet/
    "PGH",      # pygrep-hooks                  https://github.com/pre-commit/pygrep-hooks
    "PL",       # Pylint                        https://pypi.org/project/pylint/
    "TRY",      # tryceratops                   https://pypi.org/project/tryceratops/
    "FLY",      # flynt                         https://pypi.org/project/flynt/
    "NPY",      # NumPy-specific rules
    "AIR",      # Airflow                       https://pypi.org/project/apache-airflow/
    "PERF",     # Perflint                      https://pypi.org/project/perflint/
#   "FURB",     # refurb                        https://pypi.org/project/refurb/
    "LOG",      # flake8-logging                https://pypi.org/project/flake8-logging/
    "RUF",      # Ruff-specific rules
]
ignore = []

# Allow fix for all enabled rules (when --fix is provided)
fixable = ["ALL"]
unfixable = []

# Only ignore variables named "_".
dummy-variable-rgx = "^_$"

[tool.ruff.format]
# Like Black, use double quotes for strings
quote-style = "double"

# Like Black, indent with spaces, rather than tabs
indent-style = "space"

# Like Black, respect magic trailing commas
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending
line-ending = "auto"

# docstring-code-format = false
# docstring-code-line-length = "dynamic"

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]
